function working02_PseudoInverse()

clear all;
close all;
clc;

% Main image
image = imread('cameraman.tif');
f = double(image);
imgInfo = imfinfo('cameraman.tif');
imgWidth = imgInfo.Width;
imgHeight = imgInfo.Height;

figure; imshow(image, []);
f = padding(f, imgWidth, imgHeight);
imgWidth = imgWidth * 2;
imgHeight = imgHeight * 2;
displayTransformed(f);

% Degradation function
PSF = fspecial('motion', 15, 0);
OTF = fft2(PSF, imgWidth, imgHeight);

gMediate = imfilter(f, PSF, 'replicate');
%figure; imshow(gMediate,[]);

n = wgn(imgWidth, imgWidth, 2);
%n = 0.8 * randn(imgWidth, imgHeight);

g = double(gMediate) + n;
figure; imshow(g,[]);

G = fftshift(fft2(g));
displayTransformed(OTF);

N = fftshift(fft2(n));
F = fftshift(fft2(f));

H = (G - N)./ F;
%H = fftshift(OTF);

for i = 0.01 : 0.05 : 0.5
    WienerRestoreDisplay(H, G, N, F, i);
end

PseudoInverse_RestoreDisplay(H, G);

end

function WienerRestoreDisplay(H, G, N, F, k)
    x1 = 1./H;
    x2 = abs(H).^2;
    x3 = k ; %abs(N).^2 ./ abs(F).^2;
    
    % Weiner filter
    Fcap = (x1.*(x2./(x2 + x3))).*G;
    RestoredFT = Fcap;
    RestoredImage = ifft2(RestoredFT);
    figure; imshow(abs(RestoredImage), []);
end

function PseudoInverse_RestoreDisplay(H, G)
    Ha = abs(H);
    Hb = 1./Ha;
    Hb(Hb > 1/0.0025) = 0;
    Fcap = G ./ Ha;
    RestoredFT = Fcap;
    RestoredImage = ifft2(ifftshift(RestoredFT));
    figure; imshow(abs(RestoredImage), []);
end

function FT_Padded = padding(f, imgWidth, imgHeight)

    % Zero padding
    P = 2 * imgWidth;
    Q = 2 * imgHeight;
    padded = zeros(P);
    for i = 1:imgWidth
        for j=1:imgHeight
            padded(i,j) = f(i,j);
        end
    end
    imshow(padded,[]);
    FT_Padded = padded; %fftshift(fft2(padded));
end
